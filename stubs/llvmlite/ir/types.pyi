from ._utils import _StrCaching
from typing import Any, Optional

class Type(_StrCaching):
    is_pointer: bool = ...
    null: str = ...
    def as_pointer(self, addrspace: int = ...): ...
    def __ne__(self, other: Any) -> Any: ...
    def get_abi_size(self, target_data: Any, context: Optional[Any] = ...): ...
    def get_abi_alignment(self, target_data: Any, context: Optional[Any] = ...): ...
    def format_constant(self, value: Any): ...
    def wrap_constant_value(self, value: Any): ...
    def __call__(self, value: Any): ...

class MetaDataType(Type):
    def as_pointer(self) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class LabelType(Type): ...

class PointerType(Type):
    is_pointer: bool = ...
    null: str = ...
    pointee: Any = ...
    addrspace: Any = ...
    def __init__(self, pointee: Any, addrspace: int = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def gep(self, i: Any): ...
    @property
    def intrinsic_name(self): ...

class VoidType(Type):
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class FunctionType(Type):
    return_type: Any = ...
    args: Any = ...
    var_arg: Any = ...
    def __init__(self, return_type: Any, args: Any, var_arg: bool = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class IntType(Type):
    null: str = ...
    def __new__(cls, bits: Any): ...
    def __getnewargs__(self): ...
    def __copy__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def format_constant(self, val: Any): ...
    @property
    def intrinsic_name(self): ...

class _BaseFloatType(Type):
    def __new__(cls): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class HalfType(_BaseFloatType):
    null: str = ...
    intrinsic_name: str = ...
    def format_constant(self, value: Any): ...

class FloatType(_BaseFloatType):
    null: str = ...
    intrinsic_name: str = ...
    def format_constant(self, value: Any): ...

class DoubleType(_BaseFloatType):
    null: str = ...
    intrinsic_name: str = ...
    def format_constant(self, value: Any): ...

class _Repeat:
    value: Any = ...
    size: Any = ...
    def __init__(self, value: Any, size: Any) -> None: ...
    def __len__(self): ...
    def __getitem__(self, item: Any): ...

class VectorType(Type):
    element: Any = ...
    count: Any = ...
    def __init__(self, element: Any, count: Any) -> None: ...
    @property
    def elements(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __copy__(self): ...
    def format_constant(self, value: Any): ...
    def wrap_constant_value(self, values: Any): ...

class Aggregate(Type):
    def wrap_constant_value(self, values: Any): ...

class ArrayType(Aggregate):
    element: Any = ...
    count: Any = ...
    def __init__(self, element: Any, count: Any) -> None: ...
    @property
    def elements(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def gep(self, i: Any): ...
    def format_constant(self, value: Any): ...

class BaseStructType(Aggregate):
    @property
    def packed(self): ...
    @packed.setter
    def packed(self, val: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    @property
    def is_opaque(self): ...
    def structure_repr(self): ...
    def format_constant(self, value: Any): ...
    def gep(self, i: Any): ...

class LiteralStructType(BaseStructType):
    null: str = ...
    elements: Any = ...
    packed: Any = ...
    def __init__(self, elems: Any, packed: bool = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class IdentifiedStructType(BaseStructType):
    null: str = ...
    context: Any = ...
    name: Any = ...
    elements: Any = ...
    packed: Any = ...
    def __init__(self, context: Any, name: Any, packed: bool = ...) -> None: ...
    def get_declaration(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def set_body(self, *elems: Any) -> None: ...
