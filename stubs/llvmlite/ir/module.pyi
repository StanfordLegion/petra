from . import context as context, types as types, values as values
from typing import Any, Optional

class Module:
    context: Any = ...
    name: Any = ...
    data_layout: str = ...
    scope: Any = ...
    triple: str = ...
    globals: Any = ...
    metadata: Any = ...
    namedmetadata: Any = ...
    def __init__(self, name: str = ..., context: Any = ...) -> None: ...
    def add_metadata(self, operands: Any): ...
    def add_debug_info(self, kind: Any, operands: Any, is_distinct: bool = ...): ...
    def add_named_metadata(self, name: Any, element: Optional[Any] = ...): ...
    def get_named_metadata(self, name: Any): ...
    @property
    def functions(self): ...
    @property
    def global_values(self): ...
    def get_global(self, name: Any): ...
    def add_global(self, globalvalue: Any) -> None: ...
    def get_unique_name(self, name: str = ...): ...
    def declare_intrinsic(self, intrinsic: Any, tys: Any = ..., fnty: Optional[Any] = ...): ...
    def get_identified_types(self): ...
