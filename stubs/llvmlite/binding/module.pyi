from . import ffi as ffi
from .context import get_global_context as get_global_context
from .linker import link_modules as link_modules
from .value import TypeRef as TypeRef, ValueRef as ValueRef
from typing import Any, Optional

def parse_assembly(llvmir: str, context: Optional[ContextRef] = ...) -> ModuleRef: ...
def parse_bitcode(bitcode: Any, context: Optional[ContextRef] = ...) -> ModuleRef: ...

class ModuleRef(ffi.ObjectRef):
    def __init__(self, module_ptr: Any, context: Any) -> None: ...
    def as_bitcode(self): ...
    def get_function(self, name: Any): ...
    def get_global_variable(self, name: Any): ...
    def get_struct_type(self, name: Any): ...
    def verify(self) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, value: Any) -> None: ...
    @property
    def data_layout(self): ...
    @data_layout.setter
    def data_layout(self, strrep: Any) -> None: ...
    @property
    def triple(self): ...
    @triple.setter
    def triple(self, strrep: Any) -> None: ...
    def link_in(self, other: Any, preserve: bool = ...) -> None: ...
    @property
    def global_variables(self): ...
    @property
    def functions(self): ...
    @property
    def struct_types(self): ...
    def clone(self): ...

class _Iterator(ffi.ObjectRef):
    kind: Any = ...
    def __init__(self, ptr: Any, parents: Any) -> None: ...
    def __next__(self): ...
    next: Any = ...
    def __iter__(self) -> Any: ...

class _GlobalsIterator(_Iterator):
    kind: str = ...

class _FunctionsIterator(_Iterator):
    kind: str = ...

class _TypesIterator(_Iterator):
    kind: str = ...
    def __next__(self): ...
    next: Any = ...
