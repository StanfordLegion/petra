import enum
from . import ffi as ffi
from typing import Any

class Linkage(enum.IntEnum):
    external: int = ...
    available_externally: int = ...
    linkonce_any: int = ...
    linkonce_odr: int = ...
    linkonce_odr_autohide: int = ...
    weak_any: int = ...
    weak_odr: int = ...
    appending: int = ...
    internal: int = ...
    private: int = ...
    dllimport: int = ...
    dllexport: int = ...
    external_weak: int = ...
    ghost: int = ...
    common: int = ...
    linker_private: int = ...
    linker_private_weak: int = ...

class Visibility(enum.IntEnum):
    default: int = ...
    hidden: int = ...
    protected: int = ...

class StorageClass(enum.IntEnum):
    default: int = ...
    dllimport: int = ...
    dllexport: int = ...

class TypeRef(ffi.ObjectRef):
    @property
    def name(self): ...
    @property
    def is_pointer(self): ...
    @property
    def element_type(self): ...

class ValueRef(ffi.ObjectRef):
    def __init__(self, ptr: Any, kind: Any, parents: Any) -> None: ...
    @property
    def module(self): ...
    @property
    def function(self): ...
    @property
    def block(self): ...
    @property
    def instruction(self): ...
    @property
    def is_global(self): ...
    @property
    def is_function(self): ...
    @property
    def is_block(self): ...
    @property
    def is_argument(self): ...
    @property
    def is_instruction(self): ...
    @property
    def is_operand(self): ...
    @property
    def name(self): ...
    @name.setter
    def name(self, val: Any) -> None: ...
    @property
    def linkage(self): ...
    @linkage.setter
    def linkage(self, value: Any) -> None: ...
    @property
    def visibility(self): ...
    @visibility.setter
    def visibility(self, value: Any) -> None: ...
    @property
    def storage_class(self): ...
    @storage_class.setter
    def storage_class(self, value: Any) -> None: ...
    def add_function_attribute(self, attr: Any) -> None: ...
    @property
    def type(self): ...
    @property
    def is_declaration(self): ...
    @property
    def attributes(self): ...
    @property
    def blocks(self): ...
    @property
    def arguments(self): ...
    @property
    def instructions(self): ...
    @property
    def operands(self): ...
    @property
    def opcode(self): ...

class _ValueIterator(ffi.ObjectRef):
    kind: Any = ...
    def __init__(self, ptr: Any, parents: Any) -> None: ...
    def __next__(self): ...
    next: Any = ...
    def __iter__(self) -> Any: ...

class _AttributeIterator(ffi.ObjectRef):
    def __next__(self): ...
    next: Any = ...
    def __iter__(self) -> Any: ...

class _AttributeListIterator(_AttributeIterator): ...
class _AttributeSetIterator(_AttributeIterator): ...

class _BlocksIterator(_ValueIterator):
    kind: str = ...

class _ArgumentsIterator(_ValueIterator):
    kind: str = ...

class _InstructionsIterator(_ValueIterator):
    kind: str = ...

class _OperandsIterator(_ValueIterator):
    kind: str = ...
