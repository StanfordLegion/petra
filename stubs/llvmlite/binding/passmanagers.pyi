from . import ffi as ffi
from typing import Any, Optional

def create_module_pass_manager(): ...
def create_function_pass_manager(module: Any): ...

class PassManager(ffi.ObjectRef):
    def add_constant_merge_pass(self) -> None: ...
    def add_dead_arg_elimination_pass(self) -> None: ...
    def add_function_attrs_pass(self) -> None: ...
    def add_function_inlining_pass(self, threshold: Any) -> None: ...
    def add_global_dce_pass(self) -> None: ...
    def add_global_optimizer_pass(self) -> None: ...
    def add_ipsccp_pass(self) -> None: ...
    def add_dead_code_elimination_pass(self) -> None: ...
    def add_cfg_simplification_pass(self) -> None: ...
    def add_gvn_pass(self) -> None: ...
    def add_instruction_combining_pass(self) -> None: ...
    def add_licm_pass(self) -> None: ...
    def add_sccp_pass(self) -> None: ...
    def add_sroa_pass(self) -> None: ...
    def add_type_based_alias_analysis_pass(self) -> None: ...
    def add_basic_alias_analysis_pass(self) -> None: ...

class ModulePassManager(PassManager):
    def __init__(self, ptr: Optional[Any] = ...) -> None: ...
    def run(self, module: Any): ...

class FunctionPassManager(PassManager):
    def __init__(self, module: Any) -> None: ...
    def initialize(self): ...
    def finalize(self): ...
    def run(self, function: Any): ...
