from . import TestCase as TestCase
from llvmlite import ir as ir
from llvmlite.binding import ffi as ffi
from typing import Any, Optional

def no_de_locale(): ...

asm_sum: str
asm_sum2: str
asm_mul: str
asm_parse_error: str
asm_verification_fail: str
asm_sum_declare: str
asm_double_locale: str
asm_inlineasm: str
asm_global_ctors: str
asm_nonalphanum_blocklabel: str
asm_attributes: str

class BaseTest(TestCase):
    old_garbage: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def module(self, asm: Any = ..., context: Optional[Any] = ...): ...
    def glob(self, name: str = ..., mod: Optional[Any] = ...): ...
    def target_machine(self): ...

class TestDependencies(BaseTest):
    def test_linux(self) -> None: ...

class TestMisc(BaseTest):
    def test_parse_assembly(self) -> None: ...
    def test_parse_assembly_error(self) -> None: ...
    def test_nonalphanum_block_name(self) -> None: ...
    def test_global_context(self) -> None: ...
    def test_dylib_symbols(self) -> None: ...
    def test_get_default_triple(self) -> None: ...
    def test_get_process_triple(self) -> None: ...
    def test_get_host_cpu_features(self) -> None: ...
    def test_get_host_cpu_name(self) -> None: ...
    def test_initfini(self) -> None: ...
    def test_set_option(self) -> None: ...
    def test_version(self) -> None: ...
    def test_check_jit_execution(self) -> None: ...
    def test_print_double_locale(self) -> None: ...

class TestModuleRef(BaseTest):
    def test_str(self) -> None: ...
    def test_close(self) -> None: ...
    def test_with(self) -> None: ...
    def test_name(self) -> None: ...
    def test_data_layout(self) -> None: ...
    def test_triple(self) -> None: ...
    def test_verify(self) -> None: ...
    def test_get_function(self) -> None: ...
    def test_get_struct_type(self) -> None: ...
    def test_get_global_variable(self) -> None: ...
    def test_global_variables(self): ...
    def test_functions(self) -> None: ...
    def test_structs(self) -> None: ...
    def test_link_in(self) -> None: ...
    def test_link_in_preserve(self) -> None: ...
    def test_link_in_error(self) -> None: ...
    def test_as_bitcode(self) -> None: ...
    def test_parse_bitcode_error(self) -> None: ...
    def test_bitcode_roundtrip(self) -> None: ...
    def test_cloning(self) -> None: ...

class JITTestMixin:
    def get_sum(self, ee: Any, func_name: str = ...): ...
    def test_run_code(self) -> None: ...
    def test_close(self) -> None: ...
    def test_with(self) -> None: ...
    def test_module_lifetime(self) -> None: ...
    def test_module_lifetime2(self) -> None: ...
    def test_add_module(self) -> None: ...
    def test_add_module_lifetime(self) -> None: ...
    def test_add_module_lifetime2(self) -> None: ...
    def test_remove_module(self) -> None: ...
    def test_target_data(self) -> None: ...
    def test_target_data_abi_enquiries(self) -> None: ...
    def test_object_cache_notify(self) -> None: ...
    def test_object_cache_getbuffer(self): ...

class JITWithTMTestMixin(JITTestMixin):
    def test_emit_assembly(self) -> None: ...
    def test_emit_object(self) -> None: ...

class TestMCJit(BaseTest, JITWithTMTestMixin):
    def jit(self, mod: Any, target_machine: Optional[Any] = ...): ...

class TestValueRef(BaseTest):
    def test_str(self) -> None: ...
    def test_name(self) -> None: ...
    def test_linkage(self) -> None: ...
    def test_visibility(self) -> None: ...
    def test_storage_class(self) -> None: ...
    def test_add_function_attribute(self) -> None: ...
    def test_module(self) -> None: ...
    def test_type(self) -> None: ...
    def test_type_name(self) -> None: ...
    def test_type_printing_variable(self) -> None: ...
    def test_type_printing_function(self) -> None: ...
    def test_type_printing_struct(self) -> None: ...
    def test_close(self) -> None: ...
    def test_is_declaration(self) -> None: ...
    def test_module_global_variables(self) -> None: ...
    def test_module_functions(self) -> None: ...
    def test_function_arguments(self) -> None: ...
    def test_function_blocks(self) -> None: ...
    def test_block_instructions(self) -> None: ...
    def test_instruction_operands(self) -> None: ...
    def test_function_attributes(self) -> None: ...

class TestTarget(BaseTest):
    def test_from_triple(self) -> None: ...
    def test_create_target_machine(self) -> None: ...
    def test_name(self) -> None: ...
    def test_description(self) -> None: ...
    def test_str(self) -> None: ...

class TestTargetData(BaseTest):
    def target_data(self): ...
    def test_get_abi_size(self) -> None: ...
    def test_get_pointee_abi_size(self) -> None: ...
    def test_get_struct_element_offset(self) -> None: ...

class TestTargetMachine(BaseTest):
    def test_add_analysis_passes(self) -> None: ...
    def test_target_data_from_tm(self) -> None: ...

class TestPassManagerBuilder(BaseTest):
    def pmb(self): ...
    def test_old_api(self) -> None: ...
    def test_close(self) -> None: ...
    def test_opt_level(self) -> None: ...
    def test_size_level(self) -> None: ...
    def test_inlining_threshold(self) -> None: ...
    def test_disable_unroll_loops(self) -> None: ...
    def test_loop_vectorize(self) -> None: ...
    def test_slp_vectorize(self) -> None: ...
    def test_populate_module_pass_manager(self) -> None: ...
    def test_populate_function_pass_manager(self) -> None: ...

class PassManagerTestMixin:
    def pmb(self): ...
    def test_close(self) -> None: ...

class TestModulePassManager(BaseTest, PassManagerTestMixin):
    def pm(self): ...
    def test_run(self) -> None: ...

class TestFunctionPassManager(BaseTest, PassManagerTestMixin):
    def pm(self, mod: Optional[Any] = ...): ...
    def test_initfini(self) -> None: ...
    def test_run(self) -> None: ...

class TestPasses(BaseTest, PassManagerTestMixin):
    def pm(self): ...
    def test_populate(self) -> None: ...

class TestDylib(BaseTest):
    def test_bad_library(self) -> None: ...
    def test_libm(self) -> None: ...

class TestAnalysis(BaseTest):
    def build_ir_module(self): ...
    def test_get_function_cfg_on_ir(self) -> None: ...
    def test_function_cfg_on_llvm_value(self) -> None: ...

class TestTypeParsing(BaseTest):
    def check_parsing(self) -> None: ...
    def test_literal_struct(self) -> None: ...

class TestGlobalConstructors(TestMCJit):
    def test_global_ctors_dtors(self) -> None: ...

class TestGlobalVariables(BaseTest):
    def check_global_variable_linkage(self, linkage: Any, has_undef: bool = ...) -> None: ...
    def test_internal_linkage(self) -> None: ...
    def test_common_linkage(self) -> None: ...
    def test_external_linkage(self) -> None: ...
    def test_available_externally_linkage(self) -> None: ...
    def test_private_linkage(self) -> None: ...
    def test_linkonce_linkage(self) -> None: ...
    def test_weak_linkage(self) -> None: ...
    def test_appending_linkage(self) -> None: ...
    def test_extern_weak_linkage(self) -> None: ...
    def test_linkonce_odr_linkage(self) -> None: ...
    def test_weak_odr_linkage(self) -> None: ...

class TestInlineAsm(BaseTest):
    def test_inlineasm(self) -> None: ...

class TestObjectFile(BaseTest):
    mod_asm: str = ...
    def test_object_file(self) -> None: ...
    def test_add_object_file(self) -> None: ...
    def test_add_object_file_from_filesystem(self) -> None: ...
