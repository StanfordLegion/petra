import collections
import unittest
from ..six import StringIO as StringIO
from typing import Any
from unittest import runner

class NumbaTestProgram(unittest.main):
    refleak: bool = ...
    profile: bool = ...
    multiprocess: bool = ...
    discovered_suite: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    test: Any = ...
    def createTests(self) -> None: ...
    buffer: bool = ...
    def parseArgs(self, argv: Any) -> None: ...
    testRunner: Any = ...
    def runTests(self) -> None: ...

class ReferenceLeakError(RuntimeError): ...

class IntPool(collections.defaultdict):
    def __missing__(self, key: Any): ...

class RefleakTestResult(runner.TextTestResult):
    warmup: int = ...
    repetitions: int = ...
    def addSuccess(self, test: Any): ...

class RefleakTestRunner(runner.TextTestRunner):
    resultclass: Any = ...

class ParallelTestResult(runner.TextTestResult):
    def add_results(self, result: Any) -> None: ...

class _MinimalResult:
    def fixup_case(self, case: Any) -> None: ...
    def __init__(self, original_result: Any) -> None: ...

class _FakeStringIO:
    def __init__(self, value: Any) -> None: ...
    def getvalue(self): ...

class _MinimalRunner:
    runner_cls: Any = ...
    runner_args: Any = ...
    def __init__(self, runner_cls: Any, runner_args: Any) -> None: ...
    def __call__(self, test: Any): ...
    def cleanup_object(self, test: Any) -> None: ...

class ParallelTestRunner(runner.TextTestRunner):
    resultclass: Any = ...
    runner_cls: Any = ...
    runner_args: Any = ...
    def __init__(self, runner_cls: Any, **kwargs: Any) -> None: ...
    def run(self, test: Any): ...

msg: str
